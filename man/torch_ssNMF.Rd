% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nmf_method.R
\name{torch_ssNMF}
\alias{torch_ssNMF}
\title{Perform Sparse Subspace Non-negative Matrix Factorization using PyTorch}
\usage{
torch_ssNMF(
  X,
  k,
  Y = NULL,
  A = NULL,
  S = NULL,
  N = 100,
  lam = 100,
  mult = TRUE
)
}
\arguments{
\item{X}{Input data matrix}

\item{k}{Number of components}

\item{Y}{Auxiliary matrix (optional)}

\item{A}{Initial A matrix (optional)}

\item{S}{Initial S matrix (optional)}

\item{N}{Number of iterations}

\item{lam}{Regularization parameter}

\item{mult}{Use multiplicative updates}
}
\value{
List containing the factorized matrices A and S
}
\description{
Perform Sparse Subspace Non-negative Matrix Factorization using PyTorch
}
\examples{
np <- import("numpy")
reticulate::use_condaenv("SSLAR-env")
# Example data
l <- as.integer(100)
h <- as.integer(50)
X <- np$random$rand(l, h)
k <- as.integer(10)
A <- np$random$rand(l, k)
S <- np$random$rand(k, h)

# Perform SSNMF
nmf_result <- torch_ssNMF(X, k, Y = NULL, A = A, S = S, N = 100, lam = 100, mult = TRUE)

# Print results
print("A matrix:")
print(nmf_result$A)
print("S matrix:")
print(nmf_result$S)
}
